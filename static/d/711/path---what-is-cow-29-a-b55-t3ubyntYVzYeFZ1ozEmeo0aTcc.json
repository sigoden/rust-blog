{"data":{"site":{"siteMetadata":{"title":"Rust 博客","author":"sigoden huang"}},"markdownRemark":{"id":"4be88c4d-3102-5361-82db-9335ad800ecd","excerpt":"std::borrow::Cow  是一款写时克隆的智能指针。\n它最大的价值就是 写时克隆 ，如果用好，能很大程度提高性能并减少内存消耗。 类型  是个   类型的数据。  子类型容纳引用的数据，  子类型容纳拥有的数据。  表示数据可以是大小未知的，可以容纳  ， ，  等。 Rust…","html":"<p><a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\">std::borrow::Cow</a> 是一款写时克隆的智能指针。\n它最大的价值就是<strong>写时克隆</strong>，如果用好，能很大程度提高性能并减少内存消耗。</p>\n<h2>类型</h2>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">enum</span> Cow<span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a,</span> B<span class=\"token punctuation\">:</span> ?Sized <span class=\"token operator\">+</span> <span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">where</span> B<span class=\"token punctuation\">:</span> ToOwned\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// Borrowed data.</span>\n    <span class=\"token function\">Borrowed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/// Owned data.</span>\n    <span class=\"token function\">Owned</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>B <span class=\"token keyword\">as</span> ToOwned<span class=\"token operator\">></span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Owned<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Cow</code> 是个 <code class=\"language-text\">Enum</code> 类型的数据。<code class=\"language-text\">Borrowed</code> 子类型容纳引用的数据，<code class=\"language-text\">Owned</code> 子类型容纳拥有的数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> slice <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> input <span class=\"token operator\">=</span> Cow<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">Borrowed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>slice<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Borrowed 容纳引用的数据</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> input <span class=\"token operator\">=</span> Cow<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">Owned</span><span class=\"token punctuation\">(</span><span class=\"token function\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Owned 容纳拥有的数据</span></code></pre></div>\n<p><code class=\"language-text\">?Sized</code> 表示数据可以是大小未知的，可以容纳 <code class=\"language-text\">Trait Object</code>，<code class=\"language-text\">[T]</code>，<code class=\"language-text\">String</code> 等。</p>\n<blockquote>\n<p>Rust 中所有的类型参数默认是 <code class=\"language-text\">Sized</code>，我们如要取消这种限制，必须显示添加 <code class=\"language-text\">?Sized</code> 标记。</p>\n</blockquote>\n<p><code class=\"language-text\">ToOwned</code> 是一种更通用的 <code class=\"language-text\">Clone</code>，不限于仅克隆到同类型，而支持克隆到 <code class=\"language-text\">own</code> 类型（如<code class=\"language-text\">str</code> -> <code class=\"language-text\">String</code>，<code class=\"language-text\">[T]</code> -> <code class=\"language-text\">Vec&lt;T&gt;</code>）。</p>\n<h2>智能指针</h2>\n<p><code class=\"language-text\">Cow</code> 是实现了 <code class=\"language-text\">Deref</code>，是一种智能指针。我们可以直接使用内部数据的方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> slice <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> input <span class=\"token operator\">=</span> Cow<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">Borrowed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>slice<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Deref</span></code></pre></div>\n<h2>写时克隆</h2>\n<p>如果数据是只读了，不需要克隆。如果数据是可变的，对 <code class=\"language-text\">Owned</code> 型数据来说，可以直接修改，故不需要克隆，对 <code class=\"language-text\">Borrowed</code> 型数据，则可以通过<code class=\"language-text\">to_mut</code> 克隆并转换成 <code class=\"language-text\">Owned</code> 数据以进行修改操作。</p>\n<p>如有这样一个函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function\">abs_all</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> Cow<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span>i32<span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> v <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 仅 v &lt; 0 且 input 是 Borrowd，才需要克隆</span>\n            input<span class=\"token punctuation\">.</span><span class=\"token function\">to_mut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>v<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>下面的 <code class=\"language-text\">input</code> 中所有元素均 <code class=\"language-text\">&gt;= 0</code>，数据是只读了，执行时不会发生克隆。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> slice <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> input <span class=\"token operator\">=</span> Cow<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>slice<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">abs_all</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>下面的 <code class=\"language-text\">input</code> 就需要克隆了，因为 <code class=\"language-text\">input</code> 中有元素 <code class=\"language-text\">&lt; 0</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> slice <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> input <span class=\"token operator\">=</span> Cow<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>slice<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">abs_all</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>下面的 <code class=\"language-text\">input</code> 不需要克隆，应为 <code class=\"language-text\">input</code> 是 Owned 型的数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> input <span class=\"token operator\">=</span> Cow<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token function\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">abs_all</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>结合 <code class=\"language-text\">Cow</code>，<code class=\"language-text\">abs_all</code> 对只读引用的，且存在元素 <code class=\"language-text\">&gt;= 0</code> 的 <code class=\"language-text\">input</code> 数据进行了克隆。</p>\n<h2>意义</h2>\n<p>如果数据是 <code class=\"language-text\">Owned</code> 类型，不需要 <code class=\"language-text\">Cow</code> 封装。如果数据是引用的，但又注定会修改，还不如提前转换成 <code class=\"language-text\">Owned</code> 型的。\n如果数据可能是引用的，即可能被修改，也可能不会被修改，且性能特别关键，那 <code class=\"language-text\">Cow</code> 就是必须的了。</p>","frontmatter":{"title":"Cow 是干嘛的？","date":"April 03, 2019","description":"Cow 是一款写时克隆(clone-on-write)的智能指针。它有什么用呢？"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/what-is-cow/","previous":null,"next":{"fields":{"slug":"/novice-faq/"},"frontmatter":{"title":"初学者 FAQ？"}}}}